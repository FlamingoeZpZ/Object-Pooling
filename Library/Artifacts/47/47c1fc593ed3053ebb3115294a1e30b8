        string[] rawSourcePaths = optionArgs.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                            for (int i = 0; i < rawSourcePaths.Length; ++i)
                            {
                                if (sourcePaths.Length > 0)
                                    sourcePaths += ",";
                                sourcePaths += CoverageUtils.NormaliseFolderSeparators(rawSourcePaths[i]);
                            }

                            if (sourcePaths.Length > 0)
                                sourcePathsSpecified = true;
                        }
                        break;

                    default:
                        ResultsLogger.Log(ResultID.Warning_UnknownCoverageOptionProvided, optionArgsStr);
                        break;
                }
            }

            if (m_IncludeAssemblies.Length == 0)
            {
                // If there are no inlcudedAssemblies specified but there are includedPaths specified
                // then include all project assemblies so path filtering can take precedence over assembly filtering,
                // othewise if there are no includedPaths specified neither then inlcude just the user assemblies (found under the Assets folder)

                if (m_IncludePaths.Length > 0)
                    m_IncludeAssemblies = AssemblyFiltering.GetAllProjectAssembliesString();
                else
                    m_IncludeAssemblies = AssemblyFiltering.GetUserOnlyAssembliesString();
            }

            if (m_ExcludeAssemblies.Length > 0)
                m_ExcludeAssemblies += ",";

            m_ExcludeAssemblies += AssemblyFiltering.kDefaultExcludedAssemblies;

            assemblyFiltering.Parse(m_IncludeAssemblies, m_ExcludeAssemblies);
            pathFiltering.Parse(m_IncludePaths, m_ExcludePaths);
            pathReplacing.Parse(m_PathReplacePatterns);
        }

        private void ParseAssemblyFilters(string[] assemblyFilters)
        {
            for (int i = 0; i < assemblyFilters.Length; ++i)
            {
                string filter = assemblyFilters[i];
                string filterBody = filter.Length > 1 ? filter.Substring(1) : string.Empty;

                if (filter.StartsWith("+", StringComparison.OrdinalIgnoreCase))
                {
                    if (m_IncludeAssemblies.Length > 0)
                        m_IncludeAssemblies += ",";

                    if (filterBody.StartsWith("<", StringComparison.OrdinalIgnoreCase))
                    {
                        if (string.Equals(filterBody, AssemblyFiltering.kAssetsAlias, StringComparison.OrdinalIgnoreCase))
                            m_IncludeAssemblies += AssemblyFiltering.GetUserOnlyAssembliesString();
                        else if (string.Equals(filterBody, AssemblyFiltering.kAllAlias, StringComparison.OrdinalIgnoreCase))
                            m_IncludeAssemblies += AssemblyFiltering.GetAllProjectAssembliesString();
                        else if (string.Equals(filterBody, AssemblyFiltering.kPackagesAlias, StringComparison.OrdinalIgnoreCase))
                            m_IncludeAssemblies += AssemblyFiltering.GetPackagesOnlyAssembliesString();
                        else if (string.Equals(filterBody, AssemblyFiltering.kCoreAlias, StringComparison.OrdinalIgnoreCase))
                            m_IncludeAssemblies += AssemblyFiltering.kCoreAssemblies;
                    }
                    else
                    {
                        m_IncludeAssemblies += filterBody;
                    }
                }
                else if (filter.StartsWith("-", StringComparison.OrdinalIgnoreCase))
                {
                    if (m_ExcludeAssemblies.Length > 0)
                        m_ExcludeAssemblies += ",";

                    if (filterBody.StartsWith("<", StringComparison.OrdinalIgnoreCase))
                    {
                        if (string.Equals(filterBody, AssemblyFiltering.kAssetsAlias, StringComparison.OrdinalIgnoreCase))
                            m_ExcludeAssemblies += AssemblyFiltering.GetUserOnlyAssembliesString();
                        else if (string.Equals(filterBody, AssemblyFiltering.kAllAlias, StringComparison.OrdinalIgnoreCase))
    